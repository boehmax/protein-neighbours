matrix <- as.data.frame.matrix(table(na.omit(data%>%
filter(ID == protein.id%>%
select(assembly, clade)))))
matrix <- as.data.frame.matrix(table(data%>%
filter(ID == protein.id%>%
select(assembly, clade)%>%
na.omit())))
data%>%
filter(ID == protein.id%>%
select(assembly, clade)%>%
na.omit()
matrix <- as.data.frame.matrix(table(data%>%
filter(ID == protein.id)%>%
select(assembly, clade)%>%
na.omit())))
matrix <- as.data.frame.matrix(table(data%>%
filter(ID == protein.id)%>%
select(assembly, clade)%>%
na.omit()))
vector <- sort(unique(fasta_data$clade))
matrix <- as.data.frame.matrix(table(data%>%
filter(ID == protein.id)%>%
select(assembly, clade)%>%
na.omit()))
correlation.matrix <- matrix(nrow = length(vector), ncol= length(vector))
colnames(correlation.matrix) <- vector
rownames(correlation.matrix) <- vector
for (i in vector){
for (l in vector){
var1 <- nrow(matrix %>% filter(matrix[i] >= 1 & matrix[l] >= 1)) / nrow(matrix %>% filter(matrix[i] >= 1))
correlation.matrix[i,l] <- var1
}}
long <- reshape2::melt(correlation.matrix)
output.p1 <- ggplot2::ggplot(long) +
ggplot2::geom_tile(aes(x=Var1, y=Var2, fill=value)) +
ggplot2::geom_text(aes(x=Var1, y=Var2, label=round(value, 2)), size=4, col = "black") +
ggplot2::scale_fill_gradient(low = "white", high = "#66C2A5") +
ggplot2::ylab('... how likely is to have a CODH from Clade ...') +
ggplot2::xlab('If an organism has a CODH from Clade...') +
ggplot2::scale_x_discrete(position = "top") +
theme(legend.position="none")
output.p1
#no HCP
vector <- sort(unique(fasta_data$clade))
matrix <- as.data.frame.matrix(table(na.omit(data%>%
filter(ID == protein.id, clade!="HCP")%>%
select(assembly, clade))))
correlation.matrix <- matrix(nrow = length(vector), ncol= length(vector))
colnames(correlation.matrix) <- vector
rownames(correlation.matrix) <- vector
for (i in vector){
for (l in vector){
var1 <- nrow(matrix %>% filter(matrix[i] >= 1 & matrix[l] >= 1)) / nrow(matrix %>% filter(matrix[i] >= 1))
correlation.matrix[i,l] <- var1
}}
long <- reshape2::melt(correlation.matrix)
output.p <- ggplot2::ggplot(long) +
ggplot2::geom_tile(aes(x=Var1, y=Var2, fill=value)) +
ggplot2::geom_text(aes(x=Var1, y=Var2, label=round(value, 2)), size=4, col = "black") +
ggplot2::scale_fill_gradient(low = "white", high = "#66C2A5") +
ggplot2::ylab('... how likely is to have a CODH from Clade ...') +
ggplot2::xlab('If an organism has a CODH from Clade...') +
ggplot2::scale_x_discrete(position = "top") +
theme(legend.position="none")
output.p
vector <- sort(unique(data%>%
filter(ID == protein.id)%>%
select(clade)%>%
na.omit())))
vector <- sort(unique(data%>%
filter(ID == protein.id)%>%
select(clade)%>%
na.omit()))
data2 <- data%>%
filter(ID == protein.id)%>%
select(assembly, clade)%>%
na.omit()
vector <- sort(unique(data2$clade))
matrix <- as.data.frame.matrix(table(data%>%
filter(ID == protein.id)%>%
select(assembly, clade)%>%
na.omit()))
correlation.matrix <- matrix(nrow = length(vector), ncol= length(vector))
colnames(correlation.matrix) <- vector
rownames(correlation.matrix) <- vector
for (i in vector){
for (l in vector){
var1 <- nrow(matrix %>% filter(matrix[i] >= 1 & matrix[l] >= 1)) / nrow(matrix %>% filter(matrix[i] >= 1))
correlation.matrix[i,l] <- var1
}}
long <- reshape2::melt(correlation.matrix)
output.p1 <- ggplot2::ggplot(long) +
ggplot2::geom_tile(aes(x=Var1, y=Var2, fill=value)) +
ggplot2::geom_text(aes(x=Var1, y=Var2, label=round(value, 2)), size=4, col = "black") +
ggplot2::scale_fill_gradient(low = "white", high = "#66C2A5") +
ggplot2::ylab('... how likely is to have a CODH from Clade ...') +
ggplot2::xlab('If an organism has a CODH from Clade...') +
ggplot2::scale_x_discrete(position = "top") +
theme(legend.position="none")
output.p1
#no HCP
vector <- sort(unique(fasta_data$clade))
matrix <- as.data.frame.matrix(table(na.omit(data%>%
filter(ID == protein.id, clade!="HCP")%>%
select(assembly, clade))))
correlation.matrix <- matrix(nrow = length(vector), ncol= length(vector))
colnames(correlation.matrix) <- vector
rownames(correlation.matrix) <- vector
for (i in vector){
for (l in vector){
var1 <- nrow(matrix %>% filter(matrix[i] >= 1 & matrix[l] >= 1)) / nrow(matrix %>% filter(matrix[i] >= 1))
correlation.matrix[i,l] <- var1
}}
long <- reshape2::melt(correlation.matrix)
output.p <- ggplot2::ggplot(long) +
ggplot2::geom_tile(aes(x=Var1, y=Var2, fill=value)) +
ggplot2::geom_text(aes(x=Var1, y=Var2, label=round(value, 2)), size=4, col = "black") +
ggplot2::scale_fill_gradient(low = "white", high = "#66C2A5") +
ggplot2::ylab('... how likely is to have a CODH from Clade ...') +
ggplot2::xlab('If an organism has a CODH from Clade...') +
ggplot2::scale_x_discrete(position = "top") +
theme(legend.position="none")
output.p
data2 <- data%>%
filter(ID == protein.id)%>%
select(assembly, clade)%>%
na.omit()
vector <- sort(unique(data2$clade))
matrix <- as.data.frame.matrix(table(data%>%
filter(ID == protein.id)%>%
select(assembly, clade)%>%
na.omit()))
correlation.matrix <- matrix(nrow = length(vector), ncol= length(vector))
colnames(correlation.matrix) <- vector
rownames(correlation.matrix) <- vector
for (i in vector){
for (l in vector){
var1 <- nrow(matrix %>% filter(matrix[i] >= 1 & matrix[l] >= 1)) / nrow(matrix %>% filter(matrix[i] >= 1))
correlation.matrix[i,l] <- var1
}}
long <- reshape2::melt(correlation.matrix)
output.p1 <- ggplot2::ggplot(long) +
ggplot2::geom_tile(aes(x=Var1, y=Var2, fill=value)) +
ggplot2::geom_text(aes(x=Var1, y=Var2, label=round(value, 2)), size=4, col = "black") +
ggplot2::scale_fill_gradient(low = "white", high = "#66C2A5") +
ggplot2::ylab('... how likely is to have a CODH from Clade ...') +
ggplot2::xlab('If an organism has a CODH from Clade...') +
ggplot2::scale_x_discrete(position = "top") +
theme(legend.position="none")
output.p1
#no HCP
vector <- sort(unique(fasta_data$clade))
matrix <- as.data.frame.matrix(table(na.omit(data%>%
filter(ID == protein.id, clade!="HCP")%>%
select(assembly, clade))))
correlation.matrix <- matrix(nrow = length(vector), ncol= length(vector))
colnames(correlation.matrix) <- vector
rownames(correlation.matrix) <- vector
for (i in vector){
for (l in vector){
var1 <- nrow(matrix %>% filter(matrix[i] >= 1 & matrix[l] >= 1)) / nrow(matrix %>% filter(matrix[i] >= 1))
correlation.matrix[i,l] <- var1
}}
long <- reshape2::melt(correlation.matrix)
output.p <- ggplot2::ggplot(long) +
ggplot2::geom_tile(aes(x=Var1, y=Var2, fill=value)) +
ggplot2::geom_text(aes(x=Var1, y=Var2, label=round(value, 2)), size=4, col = "black") +
ggplot2::scale_fill_gradient(low = "white", high = "#66C2A5") +
ggplot2::ylab('... how likely is to have a CODH from Clade ...') +
ggplot2::xlab('If an organism has a CODH from Clade...') +
ggplot2::scale_x_discrete(position = "top") +
theme(legend.position="none")
output.p
data2 <- data%>%
filter(ID == protein.id)%>%
select(assembly, clade)%>%
na.omit()
vector <- sort(unique(data2$clade))
matrix <- as.data.frame.matrix(table(data%>%
filter(ID == protein.id)%>%
select(assembly, clade)%>%
na.omit()))
correlation.matrix <- matrix(nrow = length(vector), ncol= length(vector))
colnames(correlation.matrix) <- vector
rownames(correlation.matrix) <- vector
for (i in vector){
for (l in vector){
var1 <- nrow(matrix %>% filter(matrix[i] >= 1 & matrix[l] >= 1)) / nrow(matrix %>% filter(matrix[i] >= 1))
correlation.matrix[i,l] <- var1
}}
long <- reshape2::melt(correlation.matrix)
output.p1 <- ggplot2::ggplot(long) +
ggplot2::geom_tile(aes(x=Var1, y=Var2, fill=value)) +
ggplot2::geom_text(aes(x=Var1, y=Var2, label=round(value, 2)), size=4, col = "black") +
ggplot2::scale_fill_gradient(low = "white", high = "#66C2A5") +
ggplot2::ylab('... how likely is to have a CODH from Clade ...') +
ggplot2::xlab('If an organism has a CODH from Clade...') +
ggplot2::scale_x_discrete(position = "top") +
theme(legend.position="none")
output.p1
#no HCP
vector <- sort(unique(fasta_data$clade))
matrix <- as.data.frame.matrix(table(na.omit(data%>%
filter(ID == protein.id, clade!="HCP")%>%
select(assembly, clade))))
correlation.matrix <- matrix(nrow = length(vector), ncol= length(vector))
colnames(correlation.matrix) <- vector
rownames(correlation.matrix) <- vector
for (i in vector){
for (l in vector){
var1 <- nrow(matrix %>% filter(matrix[i] >= 1 & matrix[l] >= 1)) / nrow(matrix %>% filter(matrix[i] >= 1))
correlation.matrix[i,l] <- var1
}}
long <- reshape2::melt(correlation.matrix)
output.p <- ggplot2::ggplot(long) +
ggplot2::geom_tile(aes(x=Var1, y=Var2, fill=value)) +
ggplot2::geom_text(aes(x=Var1, y=Var2, label=round(value, 2)), size=4, col = "black") +
ggplot2::scale_fill_gradient(low = "white", high = "#66C2A5") +
ggplot2::ylab('... how likely is to have a CODH from Clade ...') +
ggplot2::xlab('If an organism has a CODH from Clade...') +
ggplot2::scale_x_discrete(position = "top") +
theme(legend.position="none")+ theme_minimal()
output.p
data2 <- data%>%
filter(ID == protein.id)%>%
select(assembly, clade)%>%
na.omit()
vector <- sort(unique(data2$clade))
matrix <- as.data.frame.matrix(table(data%>%
filter(ID == protein.id)%>%
select(assembly, clade)%>%
na.omit()))
correlation.matrix <- matrix(nrow = length(vector), ncol= length(vector))
colnames(correlation.matrix) <- vector
rownames(correlation.matrix) <- vector
for (i in vector){
for (l in vector){
var1 <- nrow(matrix %>% filter(matrix[i] >= 1 & matrix[l] >= 1)) / nrow(matrix %>% filter(matrix[i] >= 1))
correlation.matrix[i,l] <- var1
}}
long <- reshape2::melt(correlation.matrix)
output.p1 <- ggplot2::ggplot(long) +
ggplot2::geom_tile(aes(x=Var1, y=Var2, fill=value)) +
ggplot2::geom_text(aes(x=Var1, y=Var2, label=round(value, 2)), size=4, col = "black") +
ggplot2::scale_fill_gradient(low = "white", high = "#66C2A5") +
ggplot2::ylab('... how likely is to have a CODH from Clade ...') +
ggplot2::xlab('If an organism has a CODH from Clade...') +
ggplot2::scale_x_discrete(position = "top") +
theme(legend.position="none")
output.p1
#no HCP
vector <- sort(unique(fasta_data$clade))
matrix <- as.data.frame.matrix(table(na.omit(data%>%
filter(ID == protein.id, clade!="HCP")%>%
select(assembly, clade))))
correlation.matrix <- matrix(nrow = length(vector), ncol= length(vector))
colnames(correlation.matrix) <- vector
rownames(correlation.matrix) <- vector
for (i in vector){
for (l in vector){
var1 <- nrow(matrix %>% filter(matrix[i] >= 1 & matrix[l] >= 1)) / nrow(matrix %>% filter(matrix[i] >= 1))
correlation.matrix[i,l] <- var1
}}
long <- reshape2::melt(correlation.matrix)
output.p <- ggplot2::ggplot(long) +
ggplot2::geom_tile(aes(x=Var1, y=Var2, fill=value)) +
ggplot2::geom_text(aes(x=Var1, y=Var2, label=round(value, 2)), size=4, col = "black") +
ggplot2::scale_fill_gradient(low = "white", high = "#66C2A5") +
ggplot2::ylab('... how likely is to have a CODH from Clade ...') +
ggplot2::xlab('If an organism has a CODH from Clade...') +
ggplot2::scale_x_discrete(position = "top") + theme_bw()
theme(legend.position="none")
output.p
library('tidyverse')
library('gggenes')
library('RColorBrewer')
source('../R/03_function.R')
source('../R/04_plotting.R')
data <- read.csv("../output/2024-10-07/combined_df_all_neighbours_assigned.csv")
data <- data%>%
mutate(
clade = ifelse(clade == "G", "HCP", clade),
ANNOTATION2 = as.factor(case_when(
is.neighbour == FALSE & clade != "HCP" ~ "CODH",
is.neighbour == FALSE & clade == "HCP" ~ "HCP",
ANNOTATION == "CooC ?" ~ "CooC_x",
ANNOTATION == "CooT/CooJ" ~ "CooT_CooJ",
is.neighbour == TRUE ~ ANNOTATION)),
forward= case_when(strand=="+"~TRUE,
strand=="-"~FALSE))
generate_color_vector <- function(n=20) {
qual_col_pals <- brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector <- unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
col_vector
}
color_vector <- generate_color_vector(n=nrows(unique(data$ANNOTATION2)))
scale_fill_chris <- function(...){
ggplot2:::manual_scale(
'fill',
values = setNames(color_vector, unique(data$ANNOTATION2)),
na.value = "grey80"
)
}
data$COG_LETTER <- data$ANNOTATION2
nc <- prepare_neighbour_count(data%>%select(clade, COG_LETTER, is.neighbour, ANNOTATION2)%>%drop_na(), TRUE, TRUE)
p <- ggplot(nc %>% filter(COG_LETTER != "no neighbours") %>% filter(clade != "HCP"),
aes(x = reorder(COG_LETTER, +n), y = n, fill = COG_LETTER)) +
geom_bar(stat = "identity", position = "dodge", color = "black", width = 1) +
facet_grid(clade ~ ., scales = "free_y", switch = "y") +
theme_bw(base_size = 12) +
theme(panel.border = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_line(colour = "black", size = 1),
axis.ticks.length = unit(.2, "cm"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
strip.text.y.left = element_text(angle = 0),
panel.spacing.x = unit(0.5, "cm"),
legend.position = c(0.8,0.8)) +
labs(x = "Count per clade", fill = "Types of Neighbours") +
geom_text(aes(label = n), hjust = 0, nudge_y = 2, colour = 'black', size = 2, angle = 0) +
scale_fill_chris() +
coord_flip()
p
ggsave("neighbour_count_in_corres_colors.png", plot = p, width = 15, height = 25, units = "cm")
cladeA.ACS.assemblies <- data%>%
filter(clade == "A",ANNOTATION=="ACS")%>%
select(assembly)%>%
head(n = 50L)
cladeA.ACS.operons<-data%>%
filter(assembly %in% cladeA.ACS.assemblies$assembly)%>%
mutate(ANNOTATION2 = case_when(is.neighbour == FALSE ~ "CODH",
is.neighbour == TRUE ~ ANNOTATION))
cladeA.ACS.plot <- ggplot(cladeA.ACS.operons, aes(xmin = start, xmax = end, y = assembly, fill = ANNOTATION2)) +
geom_gene_arrow() +
facet_wrap(~ assembly, scales = "free", ncol = 1) +
scale_fill_manual(values=color_vector,na.value = "grey80") +
theme_genes()
ggsave("Operons_A_ACS.pdf",plot=cladeA.ACS.plot, width = 50, height = 100, units = "cm", limitsize = FALSE)
plot_operon_small <- function(data, c , clade2){
operons<-data%>%
filter(seqid %in% c, clade == clade2)
plot <- ggplot(operons, aes(xmin = start, xmax = end, y = seqid, fill = ANNOTATION2, forward=forward)) +
geom_gene_arrow() +
facet_wrap(~ assembly, scales = "free", ncol = 1) +
scale_fill_chris() +
theme_genes()
return(plot)
}
plot_operon_small_aligned <- function(data, c , clade2){
operons<-data%>%
filter(seqid %in% c, clade == clade2)
dummies <- make_alignment_dummies(
operons,
aes(xmin = start, xmax = end, y = seqid, id = ANNOTATION2
),
on = ifelse(clade2 == "HCP", "HCP", "CODH")
)
plot <- ggplot(operons, aes(xmin = start, xmax = end, y = seqid, fill = ANNOTATION2)) +
geom_gene_arrow() +
geom_blank(data = dummies) +
facet_wrap(~ seqid, scales = "free", ncol = 1) +
scale_fill_chris() +
theme_genes()
return(plot)
}
plot_operon_detailed <- function(data, c , clade2){
operons<-data%>%
filter(seqid %in% c, clade == clade2)
plot <- ggplot(operons, aes(xmin = start, xmax = end, y = seqid, fill = substr(product, start=1, stop=40), forward=forward)) +
geom_gene_arrow() +
facet_wrap(~ seqid, scales = "free", ncol = 1) +
scale_fill_discrete(name = "Product")+
theme_genes()+ theme(legend.position = "right")
return(plot)
}
a <-  c('NZ_CP009526.1', #MbCODH
'NC_003552.1' #MaCODH
)
plot_operon_small(data, a, "A")
b <-  c('NZ_JAEF01000007.1', #RfCODH
'NC_015847.1' #random CODH
)
plot_operon_small(data, b, "B")
c <-  c('NZ_JAAMYT010000022.1', #CbCODH
'NZ_CP009170.1', #TkCODH
)
a <-  c('NZ_CP009526.1', #MbCODH
'NC_003552.1' #MaCODH
)
plot_operon_small(data, a, "A")
b <-  c('NZ_JAEF01000007.1', #RfCODH
'NC_015847.1' #random CODH
)
plot_operon_small(data, b, "B")
c <-  c('NZ_JAAMYT010000022.1', #CbCODH
'NZ_CP009170.1' #TkCODH
)
plot_operon_small(data, c, "C")
a <-  c('NZ_CP009526.1', #MbCODH
'NC_003552.1' #MaCODH
)
plot_operon_small(data, a, "A")
b <-  c('NZ_JAEF01000007.1', #RfCODH
'NC_015847.1' #random CODH
)
plot_operon_small(data, b, "B")
c <-  c('NZ_JAAMYT010000022.1', #CbCODH
'NZ_CP009170.1' #TkCODH
)
plot_operon_small(data, c, "C")
d <-  c('NC_015172.1', #SgCODH
'NC_007503.1' #ChCODH-V
)
plot_operon_small(data, d, "D")
e <-  c('NC_011529.1', #ToCODH
'NZ_KI632512.1' #DvCODH not available in my dataset :( so i too another Nitratidesulfovibrio
)
plot_operon_small(data, e, "E")
f <-  c('NC_007643.1', #RrCODH
'NZ_ATYG01000009.1' #ChCODH-II
)
plot_operon_small(data, f, "F")
source("//wsl.localhost/Ubuntu/home/maxbo565/bioinformatics/p1/protein-per-organism/00_main.R", echo=TRUE)
main()
list.files()
setwd("//argos.storage.uu.se/MyFolder$/maxbo565/01_Research/01_Projects/01_P1_CbCODH/01_Data/03_spectroscopy/03_EPR/20250129")
list.files(data)
list.files(data/)
list.files("data")
list.files("data", pattern = ".DTA")
tools::file_path_sans_ext(list.files())
library('tidyverse')
library('patchwork')
library('reactable')
source('importfunction_epr.R')
setwd("//argos.storage.uu.se/MyFolder$/maxbo565/01_Research/01_Projects/01_P1_CbCODH/01_Data/03_spectroscopy/03_EPR/20250129")
# Define the input and output file paths
inputfile <- "data"
outputfile <- "csv"
# Call the Python script
python_script <- "DTAtoCSVconv.py"
system(paste("python3", python_script, "-i", inputfile, "-o", outputfile, "-a"))
filenames <- tools::file_path_sans_ext(list.files("data", pattern = ".DTA"))
all_data <- process_multiple_files(filenames)
GHz <- 9.28
all_data$g.value <- 71.4484*GHz/all_data$Field_G*10
sample.info <- read.csv('data/sample_info.csv')
filenames <- tools::file_path_sans_ext(list.files("data", pattern = ".DTA"))
all_data <- process_multiple_files(filenames)
GHz <- 9.28
all_data$g.value <- 71.4484*GHz/all_data$Field_G*10
sample.info <- read.csv('data/sample_info.csv')
sample.info <- read.csv('data/sample_info.csv')
reactable(sample.info,
columns = list(
ID = colDef(name = "Sample ID"),
Date = colDef(name = "Date"),
Protein.ID = colDef(name = "Protein ID"),
Protein.Concentration = colDef(name = "Protein Concentration [µM]"),
Sample.Volume = colDef(name = "Sample Volume [µL]"),
Redox = colDef(name = "Redox"),
CO.flused.buffer = colDef(name = "CO Flushed Buffer"),
Buffer = colDef(name = "Buffer"),
Buffer.Concentration = colDef(name = "Buffer Concentration [mM]"),
NaCl = colDef(name = "NaCl [mM]"),
Storage = colDef(name = "Storage"),
Note = colDef(name = "Note")
),
bordered = TRUE,
striped = TRUE,
highlight = TRUE,
defaultPageSize = 10,
showPageSizeOptions = TRUE,
pageSizeOptions = c(5, 10, 15),
paginationType = "simple",
searchable = TRUE,  # Add search bar
theme = reactableTheme(
color = "#000000",  # Black text
backgroundColor = "#FFFFFF",  # White background
borderColor = "#DDDDDD",  # Light gray borders
stripedColor = "#F7F7F7",  # Light gray stripes
highlightColor = "#E6E6E6",  # Slightly darker gray for highlight
cellPadding = "8px 12px",  # Padding for cells
headerStyle = list(
backgroundColor = "#F0F0F0",  # Light gray header background
borderBottom = "1px solid #DDDDDD",  # Border for header
fontWeight = "bold"  # Bold header text
),
searchInputStyle = list(
width = "100%",  # Full width search input
padding = "8px",  # Padding for search input
border = "1px solid #DDDDDD",  # Border for search input
borderRadius = "4px"  # Rounded corners for search input
)
))
#| column: screen
#| out-width: 80%
#| fig-format: svg
p01<-   ggplot(all_data%>%
filter(power_uW==20, sample != 'MB027', sample != 'MB011', scans==16),
aes(Field_G, Intensity, color=sample, label=g.value))+
geom_line(aes(y = stage(Intensity, after_stat = y + (c(0, 0.5, 1, 1.5, 2))[group])), linewidth=1)+
theme_bw()+
scale_color_brewer(palette = "Set2", name= "Samples") +
xlim(2500,4000) +
xlab("Field in G")
plotly::ggplotly(p01)
p01
