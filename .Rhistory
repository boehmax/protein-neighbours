write_csv(all.neighbours, output_file)
}
# Plot the neighbors if a valid protein of interest is provided
if (is.null(protein_of_interest) || protein_of_interest == "" || !(protein_of_interest %in% PROTEIN_ALIAS$alias)) {
print('No valid protein of interest given, skipping plotting.')
} else {
plot_neighbours(all.neighbours, protein_of_interest)
}
# Geting Clade information from text files
clades <- read_clades(PATH = PATH)
# Getting Cluster Domain information from text files
cluster_domains <- read_cluster_domain(PATH = PATH)
# Get the types of neighbours and their counts
amount_of_neighbours(cluster_domains, all.neighbours)
# Re-import the types of neighbours after manual annotation
if(file.exists(file.path("output",current_date,"types_of_neighbours_annotated.csv"))){
annotated_neighbours <- read_csv(file.path("output",current_date,"types_of_neighbours_annotated.csv"), show_col_types = FALSE)
} else {
annotated_neighbours <- NULL
}
# Combine and plot
combined_df <- combine_and_plot(all.neighbours, cluster_domains, annotated_neighbours, clades)
# Plot data
plot_neighbours_per_clade2(combined_df) #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df) #plot with unkown clades and unkown neighbours
}
main(PATH = "hcp_data", date='2024-09-11')
rlang::last_trace()
# Sourcing the scripts ####
source('R/01_open.R')
source('R/02_clean.R')
source('R/03_function.R')
source('R/03_function.R')
source('R/03_function.R')
source('R/03_function.R')
source('R/03_function.R')
main(PATH = "hcp_data", date='2024-09-11')
source('R/03_function.R')
main(PATH = "hcp_data", date='2024-09-11')
source("//wsl.localhost/Ubuntu/home/maxbo565/bioinformatics/protein-neighbours/00_main.R", echo=TRUE)
source("//wsl.localhost/Ubuntu/home/maxbo565/bioinformatics/protein-neighbours/00_main.R", echo=TRUE)
main(date='2024-09-11')
main(date='2024-09-11')
main(data="hcp_data",date='2024-09-11')
main(PATH = "hcp_data", date='2024-09-11')
source("//wsl.localhost/Ubuntu/home/maxbo565/bioinformatics/protein-neighbours/00_main.R", echo=TRUE)
main(PATH = "hcp_data", date='2024-09-11')
source('R/03_function.R')
main(PATH = "hcp_data", date='2024-09-11')
source('R/03_function.R')
main(PATH = "hcp_data", date='2024-09-11')
# Loading the Data ####
main <- function(BASEPAIRS = 300, MAX_NEIGHBORS = 15, PATH = 'data', date = NULL) {
current_date <- format(Sys.Date(), "%Y-%m-%d")
# Ask for Running, reloading or exiting while output file path is created
output_file <- create_or_validate_output_file_path(basepairs=BASEPAIRS, max_neighbors=MAX_NEIGHBORS, date=date)
# Read protein and assembly data
protein_assembly_data <- read_protein_assembly_data(PATH = PATH)
# Access the variables
protein_of_interest <- protein_assembly_data$protein_of_interest
protein <- protein_assembly_data$protein
assembly <- protein_assembly_data$assembly
protein.assembly <- protein_assembly_data$protein_assembly
# Generate protein alias data from files in representative folder
PROTEIN_ALIAS <- read_representatives(PATH = PATH)
# Check if the output file exists and if its already present read it
if (file.exists(output_file)) {
all.neighbours <- read_csv(output_file)
} else {
# Get neighboring proteins
all.neighbours <- collec_all_neigbour(protein.assembly, BASEPAIRS, MAX_NEIGHBORS, PATH)
# Save the results
write_csv(all.neighbours, output_file)
}
# Plot the neighbors if a valid protein of interest is provided
if (is.null(protein_of_interest) || protein_of_interest == "" || !(protein_of_interest %in% PROTEIN_ALIAS$alias)) {
print('No valid protein of interest given, skipping plotting.')
} else {
plot_neighbours(all.neighbours, protein_of_interest)
}
# Geting Clade information from text files
clades <- read_clades(PATH = PATH)
# Generate COG/CDD information from all neighbours proteins based on sequence
# cog_neighbours <- analyze_proteins_cog_classifier(df = all.neighbours, column= 'ID' )
# Get the types of neighbours and their counts
amount_of_neighbours(cluster_domains, all.neighbours)
# Re-import the types of neighbours after manual annotation
if(file.exists(file.path("output",current_date,"types_of_neighbours_annotated.csv"))){
annotated_neighbours <- read_csv(file.path("output",current_date,"types_of_neighbours_annotated.csv"), show_col_types = FALSE)
} else {
annotated_neighbours <- NULL
}
# Combine and plot
combined_df <- combine_and_plot(all.neighbours, cluster_domains, annotated_neighbours, clades)
# Plot data
plot_neighbours_per_clade2(combined_df) #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df) #plot with unkown clades and unkown neighbours
}
main(PATH = "hcp_data", date='2024-09-11')
source('R/03_function.R')
# Loading the Data ####
main <- function(BASEPAIRS = 300, MAX_NEIGHBORS = 15, PATH = 'data', date = NULL) {
current_date <- format(Sys.Date(), "%Y-%m-%d")
# Ask for Running, reloading or exiting while output file path is created
output_file <- create_or_validate_output_file_path(basepairs=BASEPAIRS, max_neighbors=MAX_NEIGHBORS, date=date)
# Read protein and assembly data
protein_assembly_data <- read_protein_assembly_data(PATH = PATH)
# Access the variables
protein_of_interest <- protein_assembly_data$protein_of_interest
protein <- protein_assembly_data$protein
assembly <- protein_assembly_data$assembly
protein.assembly <- protein_assembly_data$protein_assembly
# Generate protein alias data from files in representative folder
PROTEIN_ALIAS <- read_representatives(PATH = PATH)
# Check if the output file exists and if its already present read it
if (file.exists(output_file)) {
all.neighbours <- read_csv(output_file)
} else {
# Get neighboring proteins
all.neighbours <- collec_all_neigbour(protein.assembly, BASEPAIRS, MAX_NEIGHBORS, PATH)
# Save the results
write_csv(all.neighbours, output_file)
}
# Plot the neighbors if a valid protein of interest is provided
if (is.null(protein_of_interest) || protein_of_interest == "" || !(protein_of_interest %in% PROTEIN_ALIAS$alias)) {
print('No valid protein of interest given, skipping plotting.')
} else {
plot_neighbours(all.neighbours, protein_of_interest)
}
# Geting Clade information from text files
clades <- read_clades(PATH = PATH)
# Generate COG/CDD information from all neighbours proteins based on sequence
# cog_neighbours <- analyze_proteins_cog_classifier(df = all.neighbours, column= 'ID' )
cluster_domains <- data.frame()
# Get the types of neighbours and their counts
amount_of_neighbours(cluster_domains, all.neighbours)
# Re-import the types of neighbours after manual annotation
if(file.exists(file.path("output",current_date,"types_of_neighbours_annotated.csv"))){
annotated_neighbours <- read_csv(file.path("output",current_date,"types_of_neighbours_annotated.csv"), show_col_types = FALSE)
} else {
annotated_neighbours <- NULL
}
# Combine and plot
combined_df <- combine_and_plot(all.neighbours, cluster_domains, annotated_neighbours, clades)
# Plot data
plot_neighbours_per_clade2(combined_df) #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df) #plot with unkown clades and unkown neighbours
}
main(PATH = "hcp_data", date='2024-09-11')
source('R/03_function.R')
main(PATH = "hcp_data", date='2024-09-11')
# Loading the Data ####
main <- function(BASEPAIRS = 300, MAX_NEIGHBORS = 15, PATH = 'data', date = NULL) {
current_date <- format(Sys.Date(), "%Y-%m-%d")
# Ask for Running, reloading or exiting while output file path is created
output_file <- create_or_validate_output_file_path(basepairs=BASEPAIRS, max_neighbors=MAX_NEIGHBORS, date=date)
# Read protein and assembly data
protein_assembly_data <- read_protein_assembly_data(PATH = PATH)
# Access the variables
protein_of_interest <- protein_assembly_data$protein_of_interest
protein <- protein_assembly_data$protein
assembly <- protein_assembly_data$assembly
protein.assembly <- protein_assembly_data$protein_assembly
# Generate protein alias data from files in representative folder
PROTEIN_ALIAS <- read_representatives(PATH = PATH)
# Check if the output file exists and if its already present read it
if (file.exists(output_file)) {
all.neighbours <- read_csv(output_file)
} else {
# Get neighboring proteins
all.neighbours <- collec_all_neigbour(protein.assembly, BASEPAIRS, MAX_NEIGHBORS, PATH)
# Save the results
write_csv(all.neighbours, output_file)
}
# Plot the neighbors if a valid protein of interest is provided
if (is.null(protein_of_interest) || protein_of_interest == "" || !(protein_of_interest %in% PROTEIN_ALIAS$alias)) {
print('No valid protein of interest given, skipping plotting.')
} else {
plot_neighbours(all.neighbours, protein_of_interest)
}
# Geting Clade information from text files
clades <- read_clades(PATH = PATH)
# Generate COG/CDD information from all neighbours proteins based on sequence
cog_neighbours <- analyze_proteins_cog_classifier(df = all.neighbours, column= 'ID' )
cluster_domains <- data.frame()
# Get the types of neighbours and their counts
amount_of_neighbours(cluster_domains, all.neighbours)
# Re-import the types of neighbours after manual annotation
if(file.exists(file.path("output",current_date,"types_of_neighbours_annotated.csv"))){
annotated_neighbours <- read_csv(file.path("output",current_date,"types_of_neighbours_annotated.csv"), show_col_types = FALSE)
} else {
annotated_neighbours <- NULL
}
# Combine and plot
combined_df <- combine_and_plot(all.neighbours, cluster_domains, annotated_neighbours, clades)
# Plot data
plot_neighbours_per_clade2(combined_df) #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df) #plot with unkown clades and unkown neighbours
}
main(PATH = "hcp_data", date='2024-09-11')
source('R/03_function.R')
main(PATH = "hcp_data", date='2024-09-11')
source('R/03_function.R')
main(PATH = "hcp_data", date='2024-09-11')
source('R/03_function.R')
main(PATH = "hcp_data", date='2024-09-11')
source('R/03_function.R')
main(PATH = "hcp_data", date='2024-09-11')
source('R/03_function.R')
main(PATH = "hcp_data", date='2024-09-11')
source('R/03_function.R')
main(PATH = "hcp_data", date='2024-09-11')
source('R/03_function.R')
main(PATH = "hcp_data", date='2024-09-11')
source('R/03_function.R')
main(PATH = "hcp_data", date='2024-09-11')
source('R/03_function.R')
main(PATH = "hcp_data", date='2024-09-11')
source('R/03_function.R')
main(PATH = "hcp_data", date='2024-09-11')
source('R/03_function.R')
source('R/03_function.R')
main(PATH = "hcp_data", date='2024-09-11')
source('R/03_function.R')
main(PATH = "hcp_data", date='2024-09-11')
source('R/03_function.R')
main(PATH = "hcp_data", date='2024-09-11')
main(PATH = "hcp_data", date='2024-09-11')
source('R/03_function.R')
main(PATH = "hcp_data", date='2024-09-11')
main(PATH = "hcp_data", date='2024-09-11')
source('R/03_function.R')
main(PATH = "hcp_data", date='2024-09-11')
source("//wsl.localhost/Ubuntu/home/maxbo565/bioinformatics/protein-neighbours/00_main.R", echo=TRUE)
main(PATH = "hcp_data", date='2024-09-11')
main(PATH = "hcp_data", date='2024-09-11')
gc()
source("//wsl.localhost/Ubuntu/home/maxbo565/bioinformatics/protein-neighbours/00_main.R", echo=TRUE)
main(PATH = "hcp_coos_data")
main(PATH = "hcp_coos_data")
rlang::last_trace()
source("//wsl.localhost/Ubuntu/home/maxbo565/bioinformatics/protein-neighbours/00_main.R", echo=TRUE)
main(PATH = "hcp_coos_data")
main(PATH = "hcp_coos_data", date = '2024-09-16')
main(PATH = "hcp_coos_data", date = '2024-09-16')
main(PATH = "hcp_coos_data", date = '2024-09-16')
main(PATH = "hcp_coos_data", date = '2024-09-16')
problems()
problems(dat)
main(PATH = "hcp_coos_data", date = '2024-09-16')
# Loading the Data ####
main <- function(BASEPAIRS = 300, MAX_NEIGHBORS = 15, PATH = 'data', date = NULL) {
current_date <- format(Sys.Date(), "%Y-%m-%d")
# Ask for Running, reloading or exiting while output file path is created
output_file <- create_or_validate_output_file_path(basepairs=BASEPAIRS, max_neighbors=MAX_NEIGHBORS, date=date)
# Read protein and assembly data
protein_assembly_data <- read_protein_assembly_data(PATH = PATH)
# Access the variables
protein_of_interest <- protein_assembly_data$protein_of_interest
protein <- protein_assembly_data$protein
assembly <- protein_assembly_data$assembly
protein.assembly <- protein_assembly_data$protein_assembly
# Generate protein alias data from files in representative folder
PROTEIN_ALIAS <- read_representatives(PATH = PATH)
# Check if the output file exists and if its already present read it
if (file.exists(output_file)) {
all.neighbours <- read_csv(output_file)
} else {
# Get neighboring proteins
all.neighbours <- collec_all_neigbour(protein.assembly, BASEPAIRS, MAX_NEIGHBORS, PATH)
# Save the results
write_csv(all.neighbours, output_file)
}
# Plot the neighbors if a valid protein of interest is provided
if (is.null(protein_of_interest) || protein_of_interest == "" || !(protein_of_interest %in% PROTEIN_ALIAS$alias)) {
print('No valid protein of interest given, skipping plotting.')
} else {
plot_neighbours(all.neighbours, protein_of_interest)
}
# Geting Clade information from text files
clades <- read_clades(PATH = PATH)
# Generate COG/CDD information from all neighbours proteins based on sequence
cog_neighbours <- analyze_proteins_cog_classifier(df = all.neighbours, column= 'ID' )
# Get the types of neighbours and their counts
# This doesnt seem to work so far... the code that is printed in the terminal needs to be copied and run "by hand"
# Also not very elegant, since i inserted a sleeper function to make the download more stable it now takes the program
# 0.5 sec per Accession, which translates to 30 min per 3600 accession, which is easily reached
amount_of_neighbours(cog_neighbours)
# Re-import the types of neighbours after manual annotation if present
annotated_neighbours <- read_annotations(curren_date)
# Combine and plot
combined_df <- combine_and_plot(all.neighbours, cluster_domains, annotated_neighbours, clades, annotated_neighbours)
# Plot data
plot_neighbours_per_clade2(combined_df) #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df) #plot with unkown clades and unkown neighbours
}
source("//wsl.localhost/Ubuntu/home/maxbo565/bioinformatics/protein-neighbours/00_main.R", echo=TRUE)
source("//wsl.localhost/Ubuntu/home/maxbo565/bioinformatics/protein-neighbours/00_main.R", echo=TRUE)
main(PATH = "hcp_coos_data", date = "2024-09-16")
current_date <- format(Sys.Date(), "%Y-%m-%d")
# Ask for Running, reloading or exiting while output file path is created
output_file <- create_or_validate_output_file_path(basepairs=BASEPAIRS, max_neighbors=MAX_NEIGHBORS, date=date)
BASEPAIRS = 300
MAX_NEIGHBORS = 15
PATH = "hcp_coos_data"
date = "2024-09-16"
# Ask for Running, reloading or exiting while output file path is created
output_file <- create_or_validate_output_file_path(basepairs=BASEPAIRS, max_neighbors=MAX_NEIGHBORS, date=date)
# Read protein and assembly data
protein_assembly_data <- read_protein_assembly_data(PATH = PATH)
protein_of_interest <- protein_assembly_data$protein_of_interest
protein <- protein_assembly_data$protein
assembly <- protein_assembly_data$assembly
protein.assembly <- protein_assembly_data$protein_assembly
# Generate protein alias data from files in representative folder
PROTEIN_ALIAS <- read_representatives(PATH = PATH)
# Check if the output file exists and if its already present read it
if (file.exists(output_file)) {
all.neighbours <- read_csv(output_file)
} else {
# Get neighboring proteins
all.neighbours <- collec_all_neigbour(protein.assembly, BASEPAIRS, MAX_NEIGHBORS, PATH)
# Save the results
write_csv(all.neighbours, output_file)
}
# Plot the neighbors if a valid protein of interest is provided
if (is.null(protein_of_interest) || protein_of_interest == "" || !(protein_of_interest %in% PROTEIN_ALIAS$alias)) {
print('No valid protein of interest given, skipping plotting.')
} else {
plot_neighbours(all.neighbours, protein_of_interest)
}
# Geting Clade information from text files
clades <- read_clades(PATH = PATH)
# Generate COG/CDD information from all neighbours proteins based on sequence
cog_neighbours <- analyze_proteins_cog_classifier(df = all.neighbours, column= 'ID' )
View(cog_neighbours)
source('R/03_function.R')
# Generate COG/CDD information from all neighbours proteins based on sequence
cog_neighbours <- analyze_proteins_cog_classifier(df = all.neighbours, column= 'ID' )
source('R/03_function.R')
# Generate COG/CDD information from all neighbours proteins based on sequence
cog_neighbours <- analyze_proteins_cog_classifier(df = all.neighbours, column= 'ID' )
source('R/03_function.R')
# Generate COG/CDD information from all neighbours proteins based on sequence
cog_neighbours <- analyze_proteins_cog_classifier(df = all.neighbours, column= 'ID' )
View(cog_neighbours)
# Get the types of neighbours and their counts
# This doesnt seem to work so far... the code that is printed in the terminal needs to be copied and run "by hand"
# Also not very elegant, since i inserted a sleeper function to make the download more stable it now takes the program
# 0.5 sec per Accession, which translates to 30 min per 3600 accession, which is easily reached
amount_of_neighbours(cog_neighbours)
# Re-import the types of neighbours after manual annotation if present
annotated_neighbours <- read_annotations(curren_date)
current_date <- format(Sys.Date(), "%Y-%m-%d")
# Re-import the types of neighbours after manual annotation if present
annotated_neighbours <- read_annotations(curren_date)
# Combine and plot
combined_df <- combine_and_plot(all.neighbours, cluster_domains, annotated_neighbours, clades, annotated_neighbours)
# Re-import the types of neighbours after manual annotation if present
annotated_neighbours <- read_annotations(current_date)
# Combine and plot
combined_df <- combine_and_plot(all.neighbours, cluster_domains, annotated_neighbours, clades, annotated_neighbours)
# Combine and plot
combined_df <- combine_and_plot(neighbours_data = all.neighbours, cog_data = cog_neighbours, clade_assign = clades, neighbour_annotations = annotated_neighbours)
source('R/03_function.R')
# Combine and plot
combined_df <- combine_and_plot(neighbours_data = all.neighbours, cog_data = cog_neighbours, clade_assign = clades, neighbour_annotations = annotated_neighbours)
# Plot data
plot_neighbours_per_clade2(combined_df) #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df) #plot with unkown clades and unkown neighbours
?list.files
source('R/03_function.R')
# Sourcing the scripts ####
source('R/01_open.R')
# Geting Clade information from text files
clades <- read_clades(PATH = PATH)
# Combine and plot
combined_df <- combine_and_plot(neighbours_data = all.neighbours, cog_data = cog_neighbours, clade_assign = clades, neighbour_annotations = annotated_neighbours)
# Plot data
plot_neighbours_per_clade2(combined_df) #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df) #plot with unkown clades and unkown neighbours
source('R/03_function.R')
# Plot data
plot_neighbours_per_clade2(combined_df) #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df) #plot with unkown clades and unkown neighbours
source('R/03_function.R')
# Plot data
plot_neighbours_per_clade2(combined_df) #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df) #plot with unkown clades and unkown neighbours
# Plot data
plot_neighbours_per_clade2(combined_df) #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df) #plot with unkown clades and unkown neighbours
source('R/03_function.R')
# Plot data
plot_neighbours_per_clade2(combined_df) #more pretty plot without unkown clades and unkown neighbours
View(PROTEIN_ALIAS)
length(combined_df$ANNOTAION)==0
!length(combined_df$ANNOTAION)==0
plot_neighbours_per_clade2(combined_df%>%mutate(COG_LETTER=ANNOTATION), exclude_unknown_clade = TRUE, exclude_unknown_cog = TRUE, output_path = "annotated_neighbours") #more pretty plot without unkown clades and unkown neighbours
source('R/04_plotting.R')
plot_neighbours_per_clade2(combined_df%>%mutate(COG_LETTER=ANNOTATION), exclude_unknown_clade = TRUE, exclude_unknown_cog = TRUE, output_path = "annotated_neighbours") #more pretty plot without unkown clades and unkown neighbours
source('R/04_plotting.R')
# Neighbour plot with annotated neighbours
if(!length(combined_df$ANNOTAION)==0){
plot_neighbours_per_clade2(combined_df%>%mutate(COG_LETTER=ANNOTATION), exclude_unknown_clade = TRUE, exclude_unknown_cog = TRUE, output_path = "annotated_neighbours") #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df%>%mutate(COG_LETTER=ANNOTATION), output_path = "annotated_neighbours")
}
plot_neighbours_per_clade2(combined_df%>%mutate(COG_LETTER=ANNOTATION), exclude_unknown_clade = TRUE, exclude_unknown_cog = TRUE, output_path = "annotated_neighbours") #more pretty plot without unkown clades and unkown neighbours
# Plot data
plot_neighbours_per_clade(combined_df, exclude_unknown_clade = TRUE, exclude_unknown_cog = TRUE) #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df) #plot with unkown clades and unkown neighbours
# Correlation Plot: Assembly containing CODHs and HCPs
# Right now there is the problem that this only includes CODH/HCP that have a neighbour
make_correlation_matrix(combined_df%>%
select(PIGI, assembly, clade)%>%
unique()%>%
select(assembly,clade), unique(combined_df$clade))
# Amount of Assemblies with multiple HCP/CODH
create_clade_histograms2(combined_df)
source('R/04_plotting.R')
# Amount of Assemblies with multiple HCP/CODH
create_clade_histograms2(combined_df)
source('R/04_plotting.R')
# Amount of Assemblies with multiple HCP/CODH
create_clade_histograms2(combined_df)
# Amount of Assemblies with multiple HCP/CODH
create_clade_histograms2(combined_df%>%
select(PIGI, assembly, clade)%>%
unique())
# Re-import the types of neighbours after manual annotation if present
annotated_neighbours <- read_annotations(current_date)
# Sourcing the scripts ####
source('R/01_open.R')
# Re-import the types of neighbours after manual annotation if present
annotated_neighbours <- read_annotations(current_date)
# Neighbour plot with annotated neighbours
if(!length(combined_df$ANNOTAION)==0){
plot_neighbours_per_clade(combined_df%>%mutate(COG_LETTER=ANNOTATION), exclude_unknown_clade = TRUE, exclude_unknown_cog = TRUE, output_path = "annotated_neighbours") #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df%>%mutate(COG_LETTER=ANNOTATION), output_path = "annotated_neighbours")
}
# Combine and plot
combined_df <- combine_and_plot(neighbours_data = all.neighbours, cog_data = cog_neighbours, clade_assign = clades, neighbour_annotations = annotated_neighbours)
# Sourcing the scripts ####
source('R/01_open.R')
# Re-import the types of neighbours after manual annotation if present
annotated_neighbours <- read_annotations(current_date)
# Combine and plot
combined_df <- combine_and_plot(neighbours_data = all.neighbours, cog_data = cog_neighbours, clade_assign = clades, neighbour_annotations = annotated_neighbours)
# Sourcing the scripts ####
source('R/01_open.R')
source('R/02_clean.R')
source('R/03_function.R')
source('R/04_plotting.R')
# Combine and plot
combined_df <- combine_and_plot(neighbours_data = all.neighbours, cog_data = cog_neighbours, clade_assign = clades, neighbour_annotations = annotated_neighbours)
source('R/03_function.R')
source('R/04_plotting.R')
# Combine and plot
combined_df <- combine_and_plot(neighbours_data = all.neighbours, cog_data = cog_neighbours, clade_assign = clades, neighbour_annotations = annotated_neighbours)
View(annotated_neighbours)
View(combined_df)
# Re-import the types of neighbours after manual annotation if present
annotated_neighbours <- read_annotations(current_date)
# Combine and plot
combined_df <- combine_and_plot(neighbours_data = all.neighbours, cog_data = cog_neighbours, clade_assign = clades, neighbour_annotations = annotated_neighbours)
# Neighbour plot with annotated neighbours
if(!length(combined_df$ANNOTAION)==0){
plot_neighbours_per_clade(combined_df%>%mutate(COG_LETTER=ANNOTATION), exclude_unknown_clade = TRUE, exclude_unknown_cog = TRUE, output_path = "annotated_neighbours") #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df%>%mutate(COG_LETTER=ANNOTATION), output_path = "annotated_neighbours")
}
# Neighbour plot with annotated neighbours
if(!length(combined_df$ANNOTATION)==0){
plot_neighbours_per_clade(combined_df%>%mutate(COG_LETTER=ANNOTATION), exclude_unknown_clade = TRUE, exclude_unknown_cog = TRUE, output_path = "annotated_neighbours") #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df%>%mutate(COG_LETTER=ANNOTATION), output_path = "annotated_neighbours")
}
source('R/04_plotting.R')
plot_neighbours_per_clade(combined_df, exclude_unknown_clade = TRUE, exclude_unknown_cog = TRUE, , plot_codh_count = TRUE) #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df, exclude_unknown_clade = TRUE, exclude_unknown_cog = TRUE, , plot_count_codh = TRUE) #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df, plot_count_codh = TRUE)
source('R/04_plotting.R')
plot_neighbours_per_clade(combined_df, exclude_unknown_clade = TRUE, exclude_unknown_cog = TRUE, , plot_count_codh = TRUE) #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df, exclude_unknown_clade = TRUE, exclude_unknown_cog = TRUE, plot_count_codh = TRUE) #more pretty plot without unkown clades and unkown neighbours
# Plot data
plot_neighbours_per_clade(combined_df, exclude_unknown_clade = TRUE, exclude_unknown_cog = TRUE) #more pretty plot without unkown clades and unkown neighbours
source('R/04_plotting.R')
plot_neighbours_per_clade(combined_df) #plot with unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df, exclude_unknown_clade = TRUE, exclude_unknown_cog = TRUE, plot_count_codh = TRUE) #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df, plot_count_codh = TRUE)
plot_neighbours_per_clade(combined_df) #plot with unkown clades and unkown neighbours
# Neighbour plot with annotated neighbours
if(!length(combined_df$ANNOTATION)==0){
plot_neighbours_per_clade(combined_df%>%mutate(COG_LETTER=ANNOTATION), exclude_unknown_clade = TRUE, exclude_unknown_cog = TRUE, output_path = "annotated_neighbours") #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df%>%mutate(COG_LETTER=ANNOTATION), output_path = "annotated_neighbours")
plot_neighbours_per_clade(combined_df%>%mutate(COG_LETTER=ANNOTATION), exclude_unknown_clade = TRUE, exclude_unknown_cog = TRUE, output_path = "annotated_neighbours", plot_count_codh = TRUE) #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df%>%mutate(COG_LETTER=ANNOTATION), output_path = "annotated_neighbours", plot_count_codh = TRUE)
}
source('R/04_plotting.R')
# Plot data
plot_neighbours_per_clade(combined_df, exclude_unknown_clade = TRUE, exclude_unknown_cog = TRUE) #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df) #plot with unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df, exclude_unknown_clade = TRUE, exclude_unknown_cog = TRUE, plot_count_codh = TRUE) #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df, plot_count_codh = TRUE)
source('R/04_plotting.R')
plot_neighbours_per_clade(combined_df, exclude_unknown_clade = TRUE, exclude_unknown_cog = TRUE, plot_count_codh = TRUE) #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df, plot_count_codh = TRUE)
# Neighbour plot with annotated neighbours
if(!length(combined_df$ANNOTATION)==0){
plot_neighbours_per_clade(combined_df%>%mutate(COG_LETTER=ANNOTATION), exclude_unknown_clade = TRUE, exclude_unknown_cog = TRUE, output_path = "annotated_neighbours") #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df%>%mutate(COG_LETTER=ANNOTATION), output_path = "annotated_neighbours")
plot_neighbours_per_clade(combined_df%>%mutate(COG_LETTER=ANNOTATION), exclude_unknown_clade = TRUE, exclude_unknown_cog = TRUE, output_path = "annotated_neighbours", plot_count_codh = TRUE) #more pretty plot without unkown clades and unkown neighbours
plot_neighbours_per_clade(combined_df%>%mutate(COG_LETTER=ANNOTATION), output_path = "annotated_neighbours", plot_count_codh = TRUE)
}
